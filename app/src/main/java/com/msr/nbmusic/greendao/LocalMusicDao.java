package com.msr.nbmusic.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.msr.nbmusic.bean.db.LocalMusic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_MUSIC".
*/
public class LocalMusicDao extends AbstractDao<LocalMusic, Long> {

    public static final String TABLENAME = "LOCAL_MUSIC";

    /**
     * Properties of entity LocalMusic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "fileName");
        public final static Property FileType = new Property(2, String.class, "fileType", false, "fileType");
        public final static Property Summary = new Property(3, String.class, "summary", false, "summary");
        public final static Property FileSize = new Property(4, Long.class, "fileSize", false, "fileSzie");
        public final static Property Singer = new Property(5, String.class, "singer", false, "singer");
        public final static Property Duration = new Property(6, int.class, "duration", false, "duration");
        public final static Property FilePath = new Property(7, String.class, "filePath", false, "filePath");
    }


    public LocalMusicDao(DaoConfig config) {
        super(config);
    }
    
    public LocalMusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"fileName\" TEXT," + // 1: fileName
                "\"fileType\" TEXT," + // 2: fileType
                "\"summary\" TEXT," + // 3: summary
                "\"fileSzie\" INTEGER," + // 4: fileSize
                "\"singer\" TEXT," + // 5: singer
                "\"duration\" INTEGER NOT NULL ," + // 6: duration
                "\"filePath\" TEXT);"); // 7: filePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalMusic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(3, fileType);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(4, summary);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(5, fileSize);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(6, singer);
        }
        stmt.bindLong(7, entity.getDuration());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(8, filePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalMusic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(3, fileType);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(4, summary);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(5, fileSize);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(6, singer);
        }
        stmt.bindLong(7, entity.getDuration());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(8, filePath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalMusic readEntity(Cursor cursor, int offset) {
        LocalMusic entity = new LocalMusic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // summary
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // fileSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // singer
            cursor.getInt(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // filePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalMusic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSummary(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileSize(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSinger(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.getInt(offset + 6));
        entity.setFilePath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalMusic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalMusic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalMusic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
